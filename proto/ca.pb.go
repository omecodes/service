// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ca.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Purpose int32

const (
	Purpose_ServiceProvider    Purpose = 0
	Purpose_CertificateSigning Purpose = 1
)

var Purpose_name = map[int32]string{
	0: "ServiceProvider",
	1: "CertificateSigning",
}

var Purpose_value = map[string]int32{
	"ServiceProvider":    0,
	"CertificateSigning": 1,
}

func (x Purpose) String() string {
	return proto.EnumName(Purpose_name, int32(x))
}

func (Purpose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84034e4847c57e85, []int{0}
}

type CSRData struct {
	Addresses            []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Domains              []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	PublicKey            string   `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Subject              string   `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Purpose              Purpose  `protobuf:"varint,5,opt,name=purpose,proto3,enum=pb.Purpose" json:"purpose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSRData) Reset()         { *m = CSRData{} }
func (m *CSRData) String() string { return proto.CompactTextString(m) }
func (*CSRData) ProtoMessage()    {}
func (*CSRData) Descriptor() ([]byte, []int) {
	return fileDescriptor_84034e4847c57e85, []int{0}
}

func (m *CSRData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSRData.Unmarshal(m, b)
}
func (m *CSRData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSRData.Marshal(b, m, deterministic)
}
func (m *CSRData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSRData.Merge(m, src)
}
func (m *CSRData) XXX_Size() int {
	return xxx_messageInfo_CSRData.Size(m)
}
func (m *CSRData) XXX_DiscardUnknown() {
	xxx_messageInfo_CSRData.DiscardUnknown(m)
}

var xxx_messageInfo_CSRData proto.InternalMessageInfo

func (m *CSRData) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *CSRData) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CSRData) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *CSRData) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CSRData) GetPurpose() Purpose {
	if m != nil {
		return m.Purpose
	}
	return Purpose_ServiceProvider
}

type SignCertificateRequest struct {
	Csr                  *CSRData `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignCertificateRequest) Reset()         { *m = SignCertificateRequest{} }
func (m *SignCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*SignCertificateRequest) ProtoMessage()    {}
func (*SignCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84034e4847c57e85, []int{1}
}

func (m *SignCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignCertificateRequest.Unmarshal(m, b)
}
func (m *SignCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignCertificateRequest.Marshal(b, m, deterministic)
}
func (m *SignCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertificateRequest.Merge(m, src)
}
func (m *SignCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_SignCertificateRequest.Size(m)
}
func (m *SignCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertificateRequest proto.InternalMessageInfo

func (m *SignCertificateRequest) GetCsr() *CSRData {
	if m != nil {
		return m.Csr
	}
	return nil
}

type SignCertificateResponse struct {
	RawCertificate       string   `protobuf:"bytes,1,opt,name=raw_certificate,json=rawCertificate,proto3" json:"raw_certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignCertificateResponse) Reset()         { *m = SignCertificateResponse{} }
func (m *SignCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*SignCertificateResponse) ProtoMessage()    {}
func (*SignCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84034e4847c57e85, []int{2}
}

func (m *SignCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignCertificateResponse.Unmarshal(m, b)
}
func (m *SignCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignCertificateResponse.Marshal(b, m, deterministic)
}
func (m *SignCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertificateResponse.Merge(m, src)
}
func (m *SignCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_SignCertificateResponse.Size(m)
}
func (m *SignCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertificateResponse proto.InternalMessageInfo

func (m *SignCertificateResponse) GetRawCertificate() string {
	if m != nil {
		return m.RawCertificate
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.Purpose", Purpose_name, Purpose_value)
	proto.RegisterType((*CSRData)(nil), "pb.CSRData")
	proto.RegisterType((*SignCertificateRequest)(nil), "pb.SignCertificateRequest")
	proto.RegisterType((*SignCertificateResponse)(nil), "pb.SignCertificateResponse")
}

func init() { proto.RegisterFile("ca.proto", fileDescriptor_84034e4847c57e85) }

var fileDescriptor_84034e4847c57e85 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x6a, 0xe2, 0x40,
	0x14, 0x86, 0x77, 0xcc, 0xee, 0x66, 0x3d, 0x82, 0x91, 0x59, 0xd6, 0x0d, 0xae, 0x42, 0x08, 0x2c,
	0x2b, 0x5e, 0x18, 0x70, 0xa1, 0x85, 0x5e, 0xd6, 0xde, 0xf5, 0x46, 0x92, 0x07, 0x90, 0x49, 0x72,
	0x9a, 0x4e, 0x6b, 0x67, 0xa6, 0x33, 0x13, 0xc5, 0xdb, 0xbe, 0x42, 0x9f, 0xa0, 0xcf, 0xd4, 0x57,
	0xe8, 0x83, 0x94, 0x24, 0x8a, 0xd2, 0x7a, 0x79, 0xfe, 0xff, 0x7c, 0xc9, 0x77, 0x18, 0xf8, 0x91,
	0xb1, 0xa9, 0xd2, 0xd2, 0x4a, 0xda, 0x52, 0xe9, 0x60, 0x58, 0x48, 0x59, 0xac, 0x30, 0x62, 0x8a,
	0x47, 0x4c, 0x08, 0x69, 0x99, 0xe5, 0x52, 0x98, 0x66, 0x23, 0x7c, 0x21, 0xe0, 0xce, 0x93, 0xf8,
	0x8a, 0x59, 0x46, 0x87, 0xd0, 0x66, 0x79, 0xae, 0xd1, 0x18, 0x34, 0x3e, 0x09, 0x9c, 0x71, 0x3b,
	0x3e, 0x04, 0xd4, 0x07, 0x37, 0x97, 0x0f, 0x8c, 0x0b, 0xe3, 0xb7, 0xea, 0x6e, 0x3f, 0xd2, 0x11,
	0x80, 0x2a, 0xd3, 0x15, 0xcf, 0x96, 0xf7, 0xb8, 0xf5, 0x9d, 0x80, 0x54, 0x60, 0x93, 0x5c, 0xe3,
	0xb6, 0x02, 0x4d, 0x99, 0xde, 0x61, 0x66, 0xfd, 0xaf, 0x75, 0xb7, 0x1f, 0xe9, 0x5f, 0x70, 0x55,
	0xa9, 0x95, 0x34, 0xe8, 0x7f, 0x0b, 0xc8, 0xb8, 0x3b, 0xeb, 0x4c, 0x55, 0x3a, 0x5d, 0x34, 0x51,
	0xbc, 0xef, 0xc2, 0x73, 0xe8, 0x27, 0xbc, 0x10, 0x73, 0xd4, 0x96, 0xdf, 0xf0, 0x8c, 0x59, 0x8c,
	0xf1, 0xb1, 0x44, 0x63, 0xe9, 0x08, 0x9c, 0xcc, 0x68, 0x9f, 0x04, 0x64, 0xdc, 0x69, 0xe0, 0xdd,
	0x2d, 0x71, 0x95, 0x87, 0x97, 0xf0, 0xfb, 0x13, 0x68, 0x94, 0x14, 0x06, 0xe9, 0x3f, 0xf0, 0x34,
	0xdb, 0x2c, 0xb3, 0x43, 0x55, 0x7f, 0xa5, 0x1d, 0x77, 0x35, 0xdb, 0x1c, 0x01, 0x93, 0x33, 0x70,
	0x77, 0x42, 0xf4, 0x27, 0x78, 0x09, 0xea, 0x35, 0xcf, 0x70, 0xa1, 0xe5, 0x9a, 0xe7, 0xa8, 0x7b,
	0x5f, 0x68, 0x1f, 0xe8, 0xd1, 0x7a, 0xf5, 0x3b, 0x2e, 0x8a, 0x1e, 0x99, 0xdd, 0x82, 0x33, 0x4f,
	0x62, 0xca, 0xc0, 0xfb, 0xa0, 0x40, 0x07, 0x95, 0xe7, 0xe9, 0x83, 0x06, 0x7f, 0x4e, 0x76, 0x8d,
	0x73, 0xf8, 0xeb, 0xe9, 0xf5, 0xed, 0xb9, 0xe5, 0x85, 0x10, 0x55, 0xda, 0x91, 0xe1, 0x85, 0xb8,
	0x20, 0x93, 0xf4, 0x7b, 0xfd, 0x92, 0xff, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x77, 0x9c, 0x42,
	0xee, 0xf7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CSRClient is the client API for CSR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CSRClient interface {
	SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error)
}

type cSRClient struct {
	cc *grpc.ClientConn
}

func NewCSRClient(cc *grpc.ClientConn) CSRClient {
	return &cSRClient{cc}
}

func (c *cSRClient) SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error) {
	out := new(SignCertificateResponse)
	err := c.cc.Invoke(ctx, "/pb.CSR/SignCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSRServer is the server API for CSR service.
type CSRServer interface {
	SignCertificate(context.Context, *SignCertificateRequest) (*SignCertificateResponse, error)
}

func RegisterCSRServer(s *grpc.Server, srv CSRServer) {
	s.RegisterService(&_CSR_serviceDesc, srv)
}

func _CSR_SignCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSRServer).SignCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CSR/SignCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSRServer).SignCertificate(ctx, req.(*SignCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CSR",
	HandlerType: (*CSRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignCertificate",
			Handler:    _CSR_SignCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}
