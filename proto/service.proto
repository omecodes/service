syntax = "proto3";

package pb;

import "google/api/annotations.proto";

enum Protocol {
    Unknown = 0;
    Grpc = 1;
    Http = 2;
}

enum Type {
    UnknownType = 0;
    CA = 1;
    Auth = 2;
    Organization = 3;
    TokenStore = 4;
    Data = 5;
    FileStorage = 6;
    AppStore = 7;
    Accounts = 8;
    Files = 9;
}

enum Security {
    None = 0;
    TLS = 1;
    MutualTLS = 2;
}

enum Status {
    UnknownStatus = 0;
    Running = 1;
    Stopped = 2;
}

enum EventType {
    UnknownEvent = 0;
    Register = 1;
    DeRegister = 2;
    DeRegisterNode = 3;
    Update = 4;
}

enum ActionOnRegisterExistingService {
    Replace = 0;
    UpdateExisting = 1;
    AddNodes = 2;
    RemoveOld = 4;
}

message State {
    Status status = 1;
    map<string, string> metadata = 2;
}

message ConnectionInfo {
    Protocol protocol = 1;
    string address = 2;
    bytes Certificate = 3;
}

message Node {
    string Name = 1;
    Protocol protocol = 2;
    string address = 3;
    Security security = 4;
    int64 ttl = 5;
    map<string, string> meta = 6;
}

message Info {
    string name = 1;
    string namespace = 2;
    Type type = 3;
    string label = 4;
    repeated Node nodes = 5;
    map<string, string> meta = 7;
}

message Event {
    EventType type = 1;
    string namespace = 2;
    string name = 3;
    Info info = 4;
    ActionOnRegisterExistingService on_register_existing = 5;
}

message RegisterRequest {
    Info service = 1;
    ActionOnRegisterExistingService action = 2;
}
message RegisterResponse {
    string registry_id = 1;
}

message DeregisterRequest {
    string registry_id = 1;
    repeated string nodes = 2;
}
message DeregisterResponse {}

message ListRequest {
    string namespace = 1;
}
message ListResponse {
    repeated Info applications = 1;
}

message GetRequest {
    string registry_id = 1;
}
message GetResponse {
    Info info = 1;
}

message SearchRequest {
    string namespace = 1;
    Type type = 2;
}
message SearchResponse {
    repeated Info services = 1;
}

service Registry {
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option(google.api.http) = {
            post: "/service/register";
            body: "*";
        };
    };
    rpc Deregister(DeregisterRequest)returns(DeregisterResponse){
            option(google.api.http).get = "/service/deregister/{registry_id}";
    };
    rpc List(ListRequest)returns(ListResponse){
            option(google.api.http).get = "/service/list";
    };
    rpc Get(GetRequest)returns(GetResponse){
        option(google.api.http).get = "/service/get/{registry_id}";
    };
    rpc Search(SearchRequest) returns (SearchResponse) {
        option(google.api.http).get = "/service/search";
    };
    rpc Listen(stream Event) returns (stream Event);
}